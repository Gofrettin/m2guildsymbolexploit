#include "pch.h"
#include "NetDevice.h"
#include "Client.h"

#include <cxxopts.hpp>


static bool quit = false;
static void siginthandler(int signal)
{
	quit = true;
}

int main(int argc, char** argv)
{
	std::signal(SIGINT, siginthandler);
	std::signal(SIGBREAK, siginthandler);

	try
	{
		cxxopts::Options options("m2guildsysmbolexploit");
		options.positional_help("[optional args]").show_positional_help();
		options.allow_unrecognised_options().add_options()
			("i, ip", "-i <127.0.0.1>", cxxopts::value<std::string>())
			("p, port", "-p <12345>", cxxopts::value<std::uint16_t>())
			("s, security", "-s <0>", cxxopts::value<std::uint8_t>())
			("h, help", "Print help");

		const auto result = options.parse(argc, argv);
		const auto& arguments = result.arguments();

		if (arguments.empty() || result.count("help"))
		{
			std::cout << options.help() << std::endl;
			return EXIT_SUCCESS;
		}

		if (result.count("ip") > 0 && result.count("port") > 0)
		{
			const auto &ip = result["ip"].as<std::string>();
			const auto port = result["port"].as<std::uint16_t>();

			CNetworkDevice net;
			if (!net.Create())
				abort();

			Client client;
			
			if (result.count("security") > 0) {
				const auto s = result["security"].as<std::uint8_t>();
				if (s >= SECURITY_TYPE_MAX) {
					std::cerr << "Unknown security type" << std::endl;
					return EXIT_FAILURE;
				}

				client.SetSecurityType(s);
			}

			if (!client.Connect(ip.c_str(), port))
				return EXIT_FAILURE;

			do
			{
				if (_kbhit())
					if (_getch() == 27) // ESC key
						break;

				client.Process();
			} while (!quit);

			client.Disconnect();
		}
		else
		{
			std::cout << options.help() << std::endl;
			return EXIT_SUCCESS;
		}
	}
	catch (const cxxopts::OptionException& e)
	{
		std::cerr << e.what() << std::endl;
		return EXIT_FAILURE;
	}
	catch (const std::exception& e)
	{
		std::cerr << e.what() << std::endl;
		return EXIT_FAILURE;
	}
	catch (...)
	{
		std::cerr << "unhandled exception" << std::endl;
		return EXIT_FAILURE;
	}

	return EXIT_SUCCESS;
}
