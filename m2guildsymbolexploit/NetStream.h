#pragma once

#include "cipher.h"
#include "NetAddress.h"

enum SecurityType : uint8_t
{
	SECURITY_TYPE_NONE,
	SECURITY_TYPE_XTEA, // Symmetric
	SECURITY_TYPE_CIPHER, // Asymmetric
	SECURITY_TYPE_MAX,
};

class CNetworkStream
{
public:
	CNetworkStream();
	virtual ~CNetworkStream();

	void SetRecvBufferSize(int32_t recvBufSize);
	void SetSendBufferSize(int32_t sendBufSize);
	
	void SetSecurityType(uint8_t type) { m_security_type = type; }
	uint8_t GetSecurityType() const { return m_security_type; }

	void SetSecurityMode(bool isSecurityMode, const char* c_szTeaKey);
	void SetSecurityMode(bool isSecurityMode, const char* c_szTeaEncryptKey, const char* c_szTeaDecryptKey);

	bool IsSecurityMode() const;

	int32_t GetRecvBufferSize() const;

	void Clear();
	void ClearRecvBuffer();

	virtual void Process();

	bool Connect(const CNetworkAddress& c_rkNetAddr, int32_t limitSec = 3);
	bool Connect(const char* c_szAddr, int32_t port, int32_t limitSec = 3);
	bool Connect(uint32_t dwAddr, int32_t port, int32_t limitSec = 3);
	virtual void Disconnect();

	bool Peek(int32_t len);
	bool Peek(int32_t len, char* pDestBuf);
	bool Recv(int32_t len);
	bool Recv(int32_t len, char* pDestBuf);
	bool Send(int32_t len, const char* pSrcBuf);

	bool Peek(int32_t len, void* pDestBuf);
	bool Recv(int32_t len, void* pDestBuf);

	bool Send(int32_t len, const void* pSrcBuf);
	bool SendFlush(int32_t len, const void* pSrcBuf);

	bool IsOnline() const;
protected:
	virtual void OnConnectSuccess();
	virtual void OnConnectFailure();
	virtual void OnRemoteDisconnect();
	virtual void OnDisconnect();
	virtual bool OnProcess();

	bool __SendInternalBuffer();
	bool __RecvInternalBuffer();

	void __PopSendBuffer();

	int32_t __GetSendBufferSize() const;

	size_t Prepare(void* buffer, size_t* length);
	bool Activate(size_t agreed_length, const void* buffer, size_t length);
	void ActivateCipher();

private:
	time_t m_connectLimitTime;

	char* m_recvTEABuf;
	int32_t m_recvTEABufInputPos;
	int32_t m_recvTEABufSize;

	char* m_recvBuf;
	int32_t m_recvBufSize;
	int32_t m_recvBufInputPos;
	int32_t m_recvBufOutputPos;

	char* m_sendBuf;
	int32_t m_sendBufSize;
	int32_t m_sendBufInputPos;
	int32_t m_sendBufOutputPos;

	char* m_sendTEABuf;
	int32_t m_sendTEABufSize;
	int32_t m_sendTEABufInputPos;

	bool m_isOnline;


	Cipher m_cipher;

	char	m_szEncryptKey[16];
	char	m_szDecryptKey[16];

	SOCKET m_sock;
	CNetworkAddress m_addr;

	uint8_t m_security_type;
};
