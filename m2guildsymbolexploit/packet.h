#ifndef PACKET_H
#define PACKET_H

enum EPacketHeaderGameClient : uint8_t
{
	HEADER_GC_PHASE = 253,
	HEADER_GC_HANDSHAKE = 255,
	HEADER_GC_PING = 44,
	HEADER_GC_MARK_IDXLIST = 102,
	HEADER_GC_MARK_BLOCK = 100,
	HEADER_GC_GUILD_SYMBOL_DATA = 133,
	HEADER_GC_MARK_DIFF_DATA = 101,
};

enum HeaderClientGame : uint8_t
{
	HEADER_CG_MARK_LOGIN = 100,
	HEADER_CG_MARK_UPLOAD = 102,
	HEADER_CG_MARK_IDXLIST = 104,
};

#pragma pack(1)

typedef struct packet_phase
{
	uint8_t header;
	uint8_t phase;
} TPacketGCPhase;

typedef struct packet_header_handshake
{
	uint8_t header;
	uint32_t dwHandshake;
	uint32_t dwTime;
	int32_t lDelta;
} TPacketGCHandshake;

typedef struct packet_ping
{
	uint8_t header;
} TPacketGCPing;

typedef struct packet_mark_idxlist
{
	uint8_t header;
	uint32_t bufSize;
	uint16_t count;
} TPacketGCMarkIDXList;

typedef struct packet_mark_block
{
	uint8_t header;
	uint32_t bufSize;
	uint8_t imgIdx;
	uint32_t count;
} TPacketGCMarkBlock;

typedef struct packet_symbol_data
{
	uint8_t header;
	uint16_t size;
	uint32_t guild_id;
} TPacketGCGuildSymbolData;

//////////////////////////////////////////

typedef struct command_mark_idxlist
{
	uint8_t header;
} TPacketCGMarkIDXList;

typedef struct command_mark_login
{
	uint8_t header;
	uint32_t handle;
	uint32_t random_key;
} TPacketCGMarkLogin;

typedef struct command_mark_upload
{
	uint8_t	header;
	uint32_t gid;
	uint8_t	image[16 * 12 * 4];
} TPacketCGMarkUpload;

#pragma pack()

#endif // PACKET_H
